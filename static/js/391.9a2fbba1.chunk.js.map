{"version":3,"file":"static/js/391.9a2fbba1.chunk.js","mappings":"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","sources":["hoc/withAuthRedirect.js","webpack://react-first-project/./src/components/Profile/Profile.module.css?b512","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","webpack://react-first-project/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://react-first-project/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"sourcesContent":["import { Navigate } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nconst mapStateToPropsForRedirect = (state) => ({\n  isAuth: state.auth.isAuth,\n});\n\nexport const withAuthRedirect = (Component) => {\n  const RedirectComponent = (props) => {\n    if (!props.isAuth) {\n      return <Navigate to=\"/login\" />;\n    }\n\n    return <Component {...props} />;\n  };\n\n  const ConnectedRedirectComponent = connect(mapStateToPropsForRedirect)(\n    RedirectComponent,\n  );\n\n  return ConnectedRedirectComponent;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"mainContent\":\"Profile_mainContent__VGjRo\",\"mainWallpaper\":\"Profile_mainWallpaper__WJ4Y4\",\"description\":\"Profile_description__rtTo5\",\"userDescription\":\"Profile_userDescription__l7mdo\",\"name\":\"Profile_name__lLfqC\",\"ava\":\"Profile_ava__M5bEO\",\"profileStatus\":\"Profile_profileStatus__qSDHJ\"};","import { useEffect, useState } from \"react\";\nimport s from \"../Profile.module.css\";\n\nconst ProfileStatusWithHooks = (props) => {\n  const [editMode, setEditMode] = useState(false);\n  const [status, setStatus] = useState(props.status);\n  useEffect(() => {\n    setStatus(props.status);\n  }, [props.status]);\n\n  const activateEditMode = () => {\n    setEditMode(true);\n  };\n\n  const deactivateEditMode = () => {\n    setEditMode(false);\n    props.updateUserStatus(status, props.token);\n  };\n\n  const onStatusChange = (e) => {\n    setStatus(e.currentTarget.value);\n  };\n\n  return (\n    <div className={s.profileStatus}>\n      {editMode ? (\n        <div>\n          <input\n            onChange={onStatusChange}\n            autoFocus={true}\n            onBlur={deactivateEditMode}\n            value={status}\n          />\n        </div>\n      ) : (\n        <div>\n          <span onDoubleClick={activateEditMode}>{props.status}</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ProfileStatusWithHooks;\n","import s from \"../Profile.module.css\";\nimport Preloader from \"../../common/Preloader\";\n// import ProfileStatus from \"./ProfileStatus\";\nimport userPhoto from \"../../../assets/images/userPhoto.png\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\n\nconst ProfileInfo = (props) => {\n  if (!props.profile) {\n    return <Preloader />;\n  }\n\n  return (\n    <div className={s.profileInfo}>\n      <div className={s.description}>\n        <div className={s.name}>\n          <span>{props.profile.fullName}</span>\n        </div>\n\n        <div className={s.avatar}>\n          {props.profile.photos.large ? (\n            <img src={props.profile.photos.large} alt=\"\" />\n          ) : (\n            <img src={userPhoto} alt=\"\" />\n          )}\n        </div>\n\n        <div className={s.userDescription}>\n          {props.profile.aboutMe ? (\n            <span>{`About: ${props.profile.aboutMe}`}</span>\n          ) : (\n            <span>Nothing about</span>\n          )}\n        </div>\n        <ProfileStatusWithHooks\n          status={props.status}\n          updateUserStatus={props.updateUserStatus}\n          token={props.token}\n        />\n\n        <hr />\n      </div>\n    </div>\n  );\n};\n\nexport default ProfileInfo;\n","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"MyPosts_posts__GSiZ2\",\"textarea\":\"MyPosts_textarea__TKsaX\",\"button\":\"MyPosts_button__TKXtI\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Yu4oG\"};","import s from \"./Post.module.css\";\n\nconst Post = (props) => {\n  return (\n    <div className={s.item}>\n      <img\n        src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSDl6bQlvEFpaiRXfXAYDF9wkS8MulY4IrqkA&s\"\n        alt=\"\"\n      />\n      <span>{props.postText}</span>\n    </div>\n  );\n};\n\nexport default Post;\n","import { Field, reduxForm } from \"redux-form\";\nimport s from \"./MyPosts.module.css\";\nimport Post from \"./Post/Post.jsx\";\nimport {\n  maxLengthValidatorCrerator,\n  requared,\n} from \"../../../utils/validators.js\";\nimport { Textarea } from \"../../common/FormControl/FormControl.js\";\n\nconst maxLength15 = maxLengthValidatorCrerator(15);\n\nconst MyPosts = (props) => {\n  const posts = props.posts.map((post) => <Post postText={post.text} />);\n\n  const addPost = (values) => {\n    props.addPost(values.newPostText);\n  };\n\n  return (\n    <div className={s.posts}>\n      <h2>My posts</h2>\n      <AddPostReduxForm onSubmit={addPost} />\n      {posts}\n    </div>\n  );\n};\n\nconst AddPostForm = (props) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <div>\n        <Field\n          component={Textarea}\n          name=\"newPostText\"\n          className={s.textarea}\n          placeholder=\"Write your post here...\"\n          validate={[requared, maxLength15]}\n        />\n      </div>\n      <div>\n        <button className={s.button}>Add post</button>;\n      </div>\n    </form>\n  );\n};\n\nconst AddPostReduxForm = reduxForm({ form: \"ProfileAddPost\" })(AddPostForm);\n\nexport default MyPosts;\n","import MyPosts from \"./MyPosts\";\nimport { addPost } from \"../../../redux/profile-reducer\";\nimport { connect } from \"react-redux\";\n\nconst mapStateToProps = (state) => {\n  return {\n    posts: state.profilePage.posts,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addPost: (newPostText) => {\n      const action = addPost(newPostText);\n      dispatch(action);\n    },\n  };\n};\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\n\nexport default MyPostsContainer;\n","import style from \"./Profile.module.css\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\n\nconst Profile = (props) => {\n  return (\n    <div className={style.mainContent}>\n      <ProfileInfo\n        profile={props.profile}\n        status={props.status}\n        updateUserStatus={props.updateUserStatusTC}\n        token={props.token}\n      />\n      <MyPostsContainer />\n    </div>\n  );\n};\n\nexport default Profile;\n","import React from \"react\";\nimport Profile from \"./Profile\";\nimport {\n  getUserProfileThunkCreator,\n  getUserStatusTC,\n  updateUserStatusTC,\n} from \"../../redux/profile-reducer\";\nimport { connect } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { compose } from \"redux\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\n\nconst ProfileContainer = (props) => {\n  const { userId } = useParams(); // Get userId from URL\n\n  useEffect(() => {\n    let id = userId || props.authorisedUserId;\n    props.getUserProfileThunkCreator(id);\n    props.getUserStatusTC(id);\n  }, [userId, props.authorisedUserId]);\n\n  return <Profile {...props} />;\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    profile: state.profilePage.profile,\n    status: state.profilePage.status || \"Status not specified\",\n    authorisedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth,\n    token: state.auth.token,\n  };\n};\n\nexport default compose(\n  withAuthRedirect,\n  connect(mapStateToProps, {\n    getUserProfileThunkCreator,\n    getUserStatusTC,\n    updateUserStatusTC,\n  }),\n)(ProfileContainer);\n"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","_jsx","Navigate","to","editMode","setEditMode","useState","status","setStatus","useEffect","className","s","profileStatus","children","onChange","e","currentTarget","value","autoFocus","onBlur","deactivateEditMode","updateUserStatus","token","onDoubleClick","activateEditMode","profile","profileInfo","_jsxs","description","name","fullName","avatar","photos","large","src","alt","userPhoto","userDescription","aboutMe","ProfileStatusWithHooks","Preloader","postText","maxLength15","maxLengthValidatorCrerator","AddPostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","requared","posts","map","post","Post","text","values","addPost","newPostText","profilePage","dispatch","action","MyPosts","style","mainContent","ProfileInfo","updateUserStatusTC","MyPostsContainer","compose","authorisedUserId","userId","getUserProfileThunkCreator","getUserStatusTC","useParams","id","Profile"],"sourceRoot":""}